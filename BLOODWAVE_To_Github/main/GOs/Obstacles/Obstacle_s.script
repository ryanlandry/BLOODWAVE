go.property("map", 1)
local Lights = require "main/Modules/Light_Positions"

function init(self)
	self.maps = {
	msg.url("#grey_brick_2")
	}
	self.map = math.random(1,1)
	self.map = self.maps[self.map]
	G_ACTIVE_MAPS[go.get_id()] = go.get_id()
	self.pos = go.get_position()
	self.speed = 0.5
	self.lit = false
end

function final(self)
	G_ACTIVE_MAPS[go.get_id()] = nil
end

function update(self, dt)
	self.pos.y = self.pos.y - self.speed*G_SPEED
	go.set_position(self.pos)
	if self.pos.y < -320 then
		go.delete(true)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("Projectile") then
			go.delete(message.other_id)
		end
	end
	if message_id == hash("make_lights") then
		if self.lit == false then
			for i = 1, #Lights.pos[1] do
				local light = factory.create("#Lights", Lights.pos[1][i]+message.pos)
				msg.post(light, "set_parent", { parent_id = go.get_id(), keep_world_transform = 1 })
				print("parented")
				local image = msg.url(msg.url(light).socket, msg.url(light).path, "light")
				sprite.set_constant(image, "tint", vmath.vector4(1, 1, 1, 0.1))
				go.animate(image, "tint.w", go.PLAYBACK_LOOP_PINGPONG, 0.25, go.EASING_INOUTSINE, 0.3)
			end
			self.lit = true
		end
	end	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
