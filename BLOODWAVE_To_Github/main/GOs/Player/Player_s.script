function init(self)
	go.set_position(vmath.vector3(128, 96, 0.5))
	self.pos = go.get_position()
	self.pos.z = 0.75
	self.speed = 1.5 --1.5
	self.step = 16
	self.obstacle_fr = false
	self.obstacle_ba = false
	self.block_right = false
	self.block_left = false
	self.correction = vmath.vector3()
	self.moving_down = false
	self.casting = false
	self.hurt = false
	self.invincible = false
	self.cast_sounds = {
		"/Sound#Cast_1",
		"/Sound#Cast_2",
		"/Sound#Cast_3"
	}
	self.dead = false
	msg.post("#Scab_Ring_Sprite", "disable")
	msg.post("#Scab_Ring_Coll", "disable")
	sprite.set_constant("#shadow", "tint", vmath.vector4(1,1,1,0.6))
end

function final(self)

end


local function player_move(self, dir)
	if self.casting == false and self.hurt == false and self.dead == false then
		if dir == "left" and self.block_left == false then
			self.pos.x = self.pos.x -self.speed*G_SPEED
		elseif dir == "right" and self.block_right == false then
			self.pos.x = self.pos.x +self.speed*G_SPEED
		elseif dir == "up" then
			if self.obstacle_fr == false then
				self.pos.y = self.pos.y + self.speed*G_SPEED
			end
		elseif dir == "down" then
			if self.obstacle_ba == false then
				self.pos.y = self.pos.y -self.speed*G_SPEED
			end
		end
		if self.pos.x < 16 then
			self.pos.x = 16
		elseif self.pos.x > 240 then
			self.pos.x = 240
		elseif self.pos.y < 16 then
			if self.obstacle_fr == false then
				self.pos.y = 16
			end
		elseif self.pos.y > 300 then
			self.pos.y = 300
		end
	end
end

function update(self, dt)
	if self.obstacle_fr == true then
		self.pos.y = self.pos.y - G_SPEED*0.5
	end
	self.pos = self.pos + self.correction
	if self.moving_down == false then
		self.obstacle_ba = false
	elseif self.moving_down == true and self.obstacle_ba == true then
		self.pos.y = self.pos.y - G_SPEED*0.5
	end
	if self.casting == true or self.hurt == true then
		self.pos.y = self.pos.y - (0.5*G_SPEED)
	end
	go.set_position(self.pos)
	
	self.block_right = false
	self.block_left = false
	self.obstacle_fr = false
	self.obstacle_ba = false
	self.correction = vmath.vector3()
end


local function disable(self)
	msg.post("#collisionobject_main", "disable")
	msg.post("#collisionobject_sides", "disable")
end

local function correct(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			self.correction = self.correction + comp
		end
	end
end

local function hurt(self)
	msg.post("/GUI", "un_count_it")
	self.hurt = true
	self.invincible = true
	go.animate("#sprite", "tint.w", go.PLAYBACK_LOOP_PINGPONG, 0.1, go.EASING_LINEAR, 0.1)
	msg.post("#sprite", "play_animation", { id = hash("Wizard_Stand") } )
	timer.delay(0.75, false, function()
		self.hurt = false
		msg.post("#sprite", "play_animation", { id = hash("Wizard_Walk") } )	
	end)
	timer.delay(1.25, false, function()
		self.invincible = false
		go.cancel_animations("#sprite", "tint.w")
		sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
	end )
	---uuuuuggghgghghghhhhhhh!
end

function on_message(self, message_id, message, sender)
	if message_id == hash("move_left") then
		player_move(self, "left")
	elseif message_id == hash("move_right") then
		player_move(self, "right")
	elseif message_id == hash("move_up") and self.obstacle_fr == false then
		player_move(self, "up")
	elseif message_id == hash("move_down") and self.obstacle_ba == false then
		player_move(self, "down")
		self.moving_down = true
	end
	if message_id == hash("contact_point_response") and message.own_group == hash("Player") then
		if message.other_group == hash("Obstacle") then

			if message.normal.y == -1 and self.obstacle_fr == false then
				self.obstacle_fr = true
				correct(self, message)
			end
			if message.normal.y == 1 and self.obstacle_ba == false then
				self.obstacle_ba = true
				correct(self, message)
			end
		end
		if message.other_group == hash("Mana") then

		end
		if message.other_group == hash("Zombie") or message.other_group == hash("Projectile") then
			if self.invincible == false then
				hurt(self)
			end
			if message.other_group == hash("Projectile") then
				go.delete(message.other_id)
			end
		end
		if message.other_group == hash("defluid") then
			print("GAME OVER")
			msg.post("/Black_Screen", "game_over")
			self.dead = true
			disable(self)
		end
	end

	if message_id == hash("contact_point_response") and message.own_group == hash("Player_sides") then
		if message.normal.x == 1 then
			self.block_left = true
			correct(self, message)
		elseif message.normal.x == -1 then
			self.block_right = true
			correct(self, message)
		end
	end
	if message_id == hash("stop_down") then
		self.moving_down = false
	end
	if message_id == hash("animation_done") then
		if message.id == hash("Scab_Ring") then
			msg.post("#Scab_Ring_Sprite", "disable")
			msg.post("#Scab_Ring_Coll", "disable")
		end
	end
	if message_id == hash("cast_melee") then
		if self.casting == false and self.hurt == false then
			local son = math.random(1,3)
			sound.play(self.cast_sounds[son])
			msg.post("#Scab_Ring_Sprite", "enable")
			msg.post("#Scab_Ring_Sprite", "play_animation", { id = hash("Scab_Ring") } )
			msg.post("#Scab_Ring_Coll", "enable")
			msg.post("#sprite", "play_animation", { id = hash("Cast") } )
			self.casting = true
			timer.delay(0.4, false, function()
				msg.post("#sprite", "play_animation", { id = hash("Wizard_Walk") } )
				self.casting = false
			end)
		end
	end
end

function on_input(self, action_id, action)

end

function on_reload(self)

end
