local Path = require "main/Modules/Pathfinder"


function init(self)
	self.current_map = nil
	self.speed = 0.5
	self.pos = go.get_position()
	self.block_left = false
	self.block_right = false
	self.block_down = false
	self.dead = false
	self.slop_sounds = {
		"/Sound#Slop_1",
		"/Sound#Slop_2",
		"/Sound#Slop_3",
		"/Sound#Slop_4",
		"/Sound#Slop_5",
		"/Sound#Slop_6"
	}
	self.clump_sounds ={
		"/Sound#Clump_1",
		"/Sound#Clump_2"
	}
	sprite.set_constant("#shadow", "tint", vmath.vector4(1,1,1,0.6))
	msg.post("#stain", "disable")
	timer.delay(1.5, true, 
	function()
		if self.dead == false then
			local pos = go.get_position()
			pos.y = pos.y - 8
			pos.z = pos.z +0.1
			factory.create("#Blood_Spurt_f", pos)
		end
	end)
	self.dirs = {
		vmath.vector3(0, -1*self.speed, 0),
		vmath.vector3(0, 0.15, 0),
		vmath.vector3(-1*self.speed, -0.5, 0),
		vmath.vector3(1*self.speed, -0.5, 0)
	}
	self.dir = self.dirs[3]
	self.dir_num = 3
	self.previous_dir = self.dir_num
	self.correction = vmath.vector3()
	self.rays = {
		nil,
		nil,
		nil,
		nil
	}
	self.pos.z = self.pos.z +0.8
end


local function killed(self)
	local son = math.random(1,2)
	sound.play(self.clump_sounds[son])
	if self.dead == false then
		local son = math.random(1,6)
		sound.play(self.slop_sounds[son])
		msg.post("/Controller", "place_empty_enemy", { type = "blah" } )
		G_ESCAPED = G_ESCAPED + 1
	else
		msg.post("/Controller", "golem_death", { id = go.get_id() } )
		G_KILLED = G_KILLED + 1
	end
end

function final(self)
	
end
local function avoid(self)
	if self.dir_num == 3 then
		self.dir_num =4
	elseif self.dir_num == 4 then
		self.dir_num = 3
	end
	self.dir = self.dirs[self.dir_num]
end

local function rays(self)
	local pos = self.pos
	self.rays[1] = physics.raycast(self.pos, vmath.vector3(pos.x , pos.y-8, pos.z), { hash("Obstacle")} )
	--msg.post("@render:", "draw_line", { start_point = self.pos, end_point = vmath.vector3(pos.x , pos.y-9, pos.z), color = vmath.vector4(1,1,1,1) })
	self.rays[2] = physics.raycast(self.pos, vmath.vector3(pos.x, pos.y+8, pos.z), { hash("Obstacle")} )
	--msg.post("@render:", "draw_line", { start_point = self.pos, end_point = vmath.vector3(pos.x, pos.y+9, pos.z), color = vmath.vector4(1,1,1,1) })
	self.rays[3] = physics.raycast(self.pos, vmath.vector3(pos.x -8, pos.y, pos.z), { hash("Obstacle")} )
	--msg.post("@render:", "draw_line", { start_point = self.pos, end_point = vmath.vector3(pos.x -9, pos.y, pos.z), color = vmath.vector4(1,1,1,1) })
	self.rays[4] = physics.raycast(self.pos, vmath.vector3(pos.x +8, pos.y, pos.z), { hash("Obstacle")} )
	--msg.post("@render:", "draw_line", { start_point = self.pos, end_point = vmath.vector3(pos.x +9, pos.y, pos.z), color = vmath.vector4(1,1,1,1) })
end

function update(self, dt)

	if self.rays[self.dir_num] ~= nil then
		avoid(self)
	end
	
	self.pos = self.pos + self.correction
	if self.pos.y < -10 then
		go.delete()
	end
	if self.dead == false then
		rays(self)
		self.speed = 0.65*G_SPEED
		self.pos.x = self.pos.x + (self.dir.x * G_SPEED )
		self.pos.y = self.pos.y + (self.dir.y * G_SPEED )
	elseif self.dead == true then
		self.speed = 0.5
		self.dir = self.dirs[4]
		self.pos.y = self.pos.y - self.speed * G_SPEED
		print(self.speed)
	end
	go.set_position(self.pos)
	self.correction = vmath.vector3()
end


function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and message.own_group == hash("Zombie") then
		if message.other_group == hash("Obstacle") then
			if message.normal.y == 1 then
				self.correction.y = self.correction.y + message.distance
			elseif message.normal.y == -1 then
				self.correction.y = self.correction.y - message.distance
			end
			--avoid(self)
		elseif message.other_group == hash("Zombie") then
			if message.other_position.x < self.pos.x then
				self.pos.x = self.pos.x + message.distance
			elseif message.other_position.x > self.pos.x then
				self.pos.x = self.pos.x - message.distance
			end
			if message.other_position.y < self.pos.y then
				self.pos.y = self.pos.y + message.distance
			elseif message.other_position.y > self.pos.x then
				self.pos.y = self.pos.y - message.distance
			end 
		elseif message.other_group == hash("Attack") then
			msg.post(".", "get_dead")
		end
	end
	if message_id == hash("contact_point_response") and message.own_group == hash("Zombie_sides") then
		if message.normal.x == -1 then
			self.correction.x = self.correction.x - message.distance
		elseif message.normal.x == 1 then
			self.correction.x = self.correction.x + message.distance
		end
		avoid(self)
	end
	if message_id == hash("contact_point_response") and message.other_group == hash("defluid") then
		msg.post("#collisionobject_main", "disable")
		msg.post("#collisionobject_sides", "disable")
		msg.post("#sprite", "disable")
		msg.post("#shadow", "disable")
		killed(self)
	end	
	if message_id == hash("get_dead") then
		self.dead = true
		msg.post("#collisionobject_main", "disable")
		msg.post("#collisionobject_sides", "disable")
		msg.post("#sprite", "disable")
		msg.post("#stain", "enable")
		msg.post("#shadow", "disable")
		self.pos.z = self.pos.z - 0.1
		self.speed = 0.5*G_SPEED
		killed(self)
	end	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
